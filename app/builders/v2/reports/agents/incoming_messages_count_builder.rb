class V2::Reports::Agents::IncomingMessagesCountBuilder < V2::Reports::Agents::BaseReportBuilder
  def perform
    agents.map do |agent|
      {
        id: agent.id,
        name: agent.name,
        email: agent.email,
        entries: incoming_messages_count_by_user[agent.id]
      }
    end
  end

  private

  def incoming_messages
    @incoming_messages ||= account.messages.joins(:conversation).incoming.unscope(:order).group(:id, 'conversations.assignee_id')
  end

  def grouped_incoming_messages_count
    intermediate_values = (get_grouped_values incoming_messages).count  # result is of the form [[mesage_id, agent_user_id, group_by], incoming_messages_count]
    count_messages_for_agent_on_date = intermediate_values.each_with_object(Hash.new(0)) do |(key, count), acc|
      # Extract assignee_id and date, ignoring message_id
      assignee_id = key[1]
      date = key[2]

      # Combine assignee_id and date as the key and sum the counts
      acc[[assignee_id, date]] += count
    end
    count_messages_for_agent_on_date.map do |key, count|
      # Convert the hash back to the array format usually generated by get_grouped_values
      [[key[0], key[1]], count]
    end
  end

  ## pulling out agent_user_id from: [[agent_user_id, group_by], incoming_messages_count]
  def agent_user_id_key(grouped_result)
    grouped_result.first.first
  end

  ## pulling out incoming_messages_count from: [[agent_user_id, group_by], incoming_messages_count]
  def incoming_messages_count(grouped_result)
    grouped_result.second
  end

  ## pulling out group_by from: [[agent_user_id, group_by], incoming_messages_count]
  def group_by_duration_key(grouped_result)
    grouped_result.first.second
  end

  def incoming_messages_count_by_user
    @incoming_messages_count_by_user ||= grouped_incoming_messages_count.each_with_object({}) do |result, hash|
      hash[agent_user_id_key(result)] ||= {}
      hash[agent_user_id_key(result)][group_by_duration_key(result)] = incoming_messages_count(result)
    end
  end
end
